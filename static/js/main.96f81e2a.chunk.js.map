{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["getTodos","fetch","then","response","json","TodoList","state","todos","id","createdAt","updatedAt","userId","title","completed","filterByStatus","titleFilter","handleTitleChange","event","setState","target","value","handleSelectChange","handleStatusFilter","a","filter","todo","includes","serverTodos","this","_prevProps","prevState","className","type","placeholder","onChange","map","htmlFor","checked","readOnly","onClick","props","onUserChange","selectedUserId","React","Component","CurrentUser","user","isError","newUser","prevProps","currentUserId","name","email","phone","clearUser","App","handleChangeUser","handleClearUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96f81e2a.chunk.js","sourcesContent":["const TODO_API = 'https://mate.academy/students-api/todos';\nconst USER_API = 'https://mate.academy/students-api/users/';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(TODO_API)\n    .then(response => response.json());\n}\n\nexport function getUser(userId: number): Promise<User> {\n  return fetch(`${USER_API}${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './TodoList.scss';\nimport { getTodos } from '../../api/api';\n\ntype Props = {\n  selectedUserId: number,\n  onUserChange: (userId: number) => void,\n};\ntype State = {\n  todos: Todo[],\n  filterByStatus: string,\n  titleFilter: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [{\n      id: 0,\n      createdAt: '',\n      updatedAt: '',\n      userId: 0,\n      title: '',\n      completed: false,\n    }],\n    filterByStatus: 'all',\n    titleFilter: '',\n  };\n\n  async componentDidMount() {\n    this.setState({ todos: await getTodos() });\n  }\n\n  componentDidUpdate(_prevProps: Props, prevState: State) {\n    if (this.state.filterByStatus !== prevState.filterByStatus\n      || prevState.titleFilter !== this.state.titleFilter) {\n      this.handleStatusFilter();\n    }\n  }\n\n  handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ titleFilter: event.target.value });\n  };\n\n  handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ filterByStatus: event.target.value });\n  };\n\n  handleStatusFilter = async () => {\n    const { titleFilter } = this.state;\n\n    let serverTodos = await getTodos().then(todos => todos\n      .filter(todo => todo.title.includes(titleFilter)));\n\n    switch (this.state.filterByStatus) {\n      case 'completed':\n        serverTodos = serverTodos.filter(todo => todo.completed === true);\n        break;\n      case 'not completed':\n        serverTodos = serverTodos.filter(todo => todo.completed === false);\n        break;\n      default:\n    }\n\n    this.setState({\n      todos: serverTodos,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"TodoList\">\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          className=\"TodoList__filter\"\n          value={this.state.titleFilter}\n          onChange={this.handleTitleChange}\n        />\n        <select\n          value={this.state.filterByStatus}\n          onChange={this.handleSelectChange}\n        >\n          <option value=\"all\">Show all</option>\n          <option value=\"completed\">Show completed</option>\n          <option value=\"not completed\">Show not completed</option>\n        </select>\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.state.todos?.map(todo => (\n              <li\n                className={`TodoList__item TodoList__item--${todo.completed ? 'checked' : 'unchecked'}`}\n                key={todo.id}\n              >\n                <label htmlFor={`${todo.id}`}>\n                  <input type=\"checkbox\" id={`${todo.id}`} checked={todo.completed} readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  onClick={() => {\n                    this.props.onUserChange(todo.userId);\n                  }}\n                  className={`\n                    TodoList__user-button\n                    ${todo.userId === this.props.selectedUserId ? 'TodoList__user-button--selected' : ''}\n                    button\n                  `}\n                  type=\"button\"\n                >\n                  {`User ${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ntype Props = {\n  currentUserId: number,\n  clearUser: () => void,\n};\n\ntype State = {\n  user: User | null,\n  isError: boolean,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    isError: false,\n  };\n\n  componentDidMount() {\n    this.newUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.currentUserId !== prevProps.currentUserId) {\n      this.newUser();\n    }\n  }\n\n  async newUser() {\n    try {\n      const user = await getUser(this.props.currentUserId);\n\n      this.setState({ user, isError: false });\n    } catch (error) {\n      this.setState({ isError: true });\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {!this.state.isError\n          ? (\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${this.state.user?.id}`}</span></h2>\n\n              <h3 className=\"CurrentUser__name\">{this.state.user?.name}</h3>\n              <p className=\"CurrentUser__email\">{this.state.user?.email}</p>\n              <p className=\"CurrentUser__phone\">{this.state.user?.phone}</p>\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={this.props.clearUser}\n              >\n                Clear User\n              </button>\n            </div>\n          )\n          : <p>User Not Found</p>}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  handleChangeUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  handleClearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={this.state.selectedUserId}\n            onUserChange={this.handleChangeUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                currentUserId={this.state.selectedUserId}\n                clearUser={this.handleClearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}