{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["getTodos","fetch","then","response","json","TodoList","state","todos","id","createdAt","updatedAt","userId","title","completed","filterByStatus","titleFilter","prevStatus","prevTitle","handleTitleChange","event","setState","target","value","handleSelectChange","handleStatusFilter","a","filter","todo","includes","this","console","log","className","type","placeholder","onChange","map","htmlFor","checked","readOnly","onClick","props","onUserChange","selectedUserId","React","Component","CurrentUser","user","isError","newUser","prevProps","currentUserId","name","email","phone","clearUser","App","handleChangeUser","handleClearUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71e23d51.chunk.js","sourcesContent":["const TODO_API = 'https://mate.academy/students-api/todos';\nconst USER_API = 'https://mate.academy/students-api/users/';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(TODO_API)\n    .then(response => response.json());\n}\n\nexport function getUser(userId: number): Promise<User> {\n  return fetch(`${USER_API}${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './TodoList.scss';\nimport { getTodos } from '../../api/api';\n\ntype Props = {\n  selectedUserId: number,\n  onUserChange: (userId: number) => void,\n};\ntype State = {\n  todos: Todo[],\n  filterByStatus: string,\n  titleFilter: string,\n  prevStatus: string,\n  prevTitle: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [{\n      id: 0,\n      createdAt: '',\n      updatedAt: '',\n      userId: 0,\n      title: '',\n      completed: false,\n    }],\n    filterByStatus: 'all',\n    titleFilter: '',\n    prevStatus: '',\n    prevTitle: '',\n  };\n\n  async componentDidMount() {\n    this.setState({ todos: await getTodos() });\n  }\n\n  componentDidUpdate() {\n    if (this.state.filterByStatus !== this.state.prevStatus\n      || this.state.prevTitle !== this.state.titleFilter) {\n      this.handleStatusFilter();\n      // eslint-disable-next-line no-console\n      console.log('test');\n    }\n  }\n\n  handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ titleFilter: event.target.value });\n  };\n\n  handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ filterByStatus: event.target.value });\n  };\n\n  handleStatusFilter = async () => {\n    const { titleFilter } = this.state;\n\n    this.setState(state => ({ prevStatus: state.filterByStatus, prevTitle: state.titleFilter }));\n\n    if (this.state.filterByStatus === 'completed') {\n      this.setState({\n        todos: await getTodos().then(todos => todos\n          .filter(todo => todo.completed === true && todo.title.includes(titleFilter))),\n      });\n    } else if (this.state.filterByStatus === 'not completed') {\n      this.setState({\n        todos: await getTodos().then(todos => todos\n          .filter(todo => todo.completed === false && todo.title.includes(titleFilter))),\n      });\n    } else if (this.state.filterByStatus === 'all') {\n      this.setState({\n        todos: await getTodos().then(todos => todos\n          .filter(todo => todo.title.includes(titleFilter))),\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"TodoList\">\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          className=\"TodoList__filter\"\n          value={this.state.titleFilter}\n          onChange={this.handleTitleChange}\n        />\n        <select\n          value={this.state.filterByStatus}\n          onChange={this.handleSelectChange}\n        >\n          <option value=\"all\">Show all</option>\n          <option value=\"completed\">Show completed</option>\n          <option value=\"not completed\">Show not completed</option>\n        </select>\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.state.todos?.map(todo => (\n              <li\n                className={`TodoList__item TodoList__item--${todo.completed ? 'checked' : 'unchecked'}`}\n                key={todo.id}\n              >\n                <label htmlFor={`${todo.id}`}>\n                  <input type=\"checkbox\" id={`${todo.id}`} checked={todo.completed} readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  onClick={() => {\n                    this.props.onUserChange(todo.userId);\n                  }}\n                  className={`\n                    TodoList__user-button\n                    ${todo.userId === this.props.selectedUserId ? 'TodoList__user-button--selected' : ''}\n                    button\n                  `}\n                  type=\"button\"\n                >\n                  {`User ${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ntype Props = {\n  currentUserId: number,\n  clearUser: () => void,\n};\n\ntype State = {\n  user: User | null,\n  isError: boolean,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    isError: false,\n  };\n\n  componentDidMount() {\n    this.newUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    // eslint-disable-next-line no-console\n    console.log(this.props.currentUserId);\n    if (this.props.currentUserId !== prevProps.currentUserId) {\n      this.newUser();\n    }\n  }\n\n  async newUser() {\n    try {\n      const user = await getUser(this.props.currentUserId);\n\n      this.setState({ user, isError: false });\n    } catch (error) {\n      this.setState({ isError: true });\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {!this.state.isError\n          ? (\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${this.state.user?.id}`}</span></h2>\n\n              <h3 className=\"CurrentUser__name\">{this.state.user?.name}</h3>\n              <p className=\"CurrentUser__email\">{this.state.user?.email}</p>\n              <p className=\"CurrentUser__phone\">{this.state.user?.phone}</p>\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={this.props.clearUser}\n              >\n                Clear User\n              </button>\n            </div>\n          )\n          : <p>User Not Found</p>}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  handleChangeUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  handleClearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={this.state.selectedUserId}\n            onUserChange={this.handleChangeUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                currentUserId={this.state.selectedUserId}\n                clearUser={this.handleClearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}